{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Naveen M\\\\Desktop\\\\jobmail\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport { useState } from 'react';\nimport { sendemail } from './apicalls/email';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [emailList, setEmailList] = useState([]);\n  const [failedEmails, setFailedEmails] = useState([]);\n  const handleSendEmails = async () => {\n    let failedList = [];\n    let successCount = 0;\n    for (const record of emailList) {\n      const payload = {\n        name: record.name,\n        email: record.email,\n        subject: `Application for ${record.title}`,\n        message: `Dear ${record.name},\\n\\nI'm writing to express my interest in the position at ${record.company}.`\n      };\n      try {\n        const response = await sendemail(payload);\n        if (response.status === 'success') {\n          console.log(`✅ Email sent to: ${record.email}`);\n          successCount++;\n        } else {\n          console.error(`❌ Failed to send email to: ${record.email} - ${response.message}`);\n          failedList.push({\n            email: record.email,\n            reason: response.message\n          });\n        }\n      } catch (error) {\n        console.error(`❌ Error sending email to: ${record.email} - ${error.message}`);\n        failedList.push({\n          email: record.email,\n          reason: error.message\n        });\n      }\n    }\n    setFailedEmails(failedList);\n\n    // ✅ Show success or failure summary\n    if (failedList.length > 0) {\n      alert(`✅ ${successCount} emails sent successfully!\\n❌ ${failedList.length} emails failed.`);\n    } else {\n      alert(`✅ All ${successCount} emails sent successfully!`);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Email Sender\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleSendEmails,\n      children: \"Send Emails\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), failedEmails.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"\\u274C Failed Emails:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: failedEmails.map((fail, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [fail.email, \" - \", fail.reason]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"3mwAuMNa9Q6czQAnRRPvy7mYgNg=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","sendemail","jsxDEV","_jsxDEV","App","_s","emailList","setEmailList","failedEmails","setFailedEmails","handleSendEmails","failedList","successCount","record","payload","name","email","subject","title","message","company","response","status","console","log","error","push","reason","length","alert","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","map","fail","index","_c","$RefreshReg$"],"sources":["C:/Users/Naveen M/Desktop/jobmail/frontend/src/App.js"],"sourcesContent":["import { useState } from 'react';\nimport { sendemail } from './apicalls/email';\n\nfunction App() {\n  const [emailList, setEmailList] = useState([]);\n  const [failedEmails, setFailedEmails] = useState([]);\n\n  const handleSendEmails = async () => {\n    let failedList = [];\n    let successCount = 0;\n\n    for (const record of emailList) {\n      const payload = {\n        name: record.name,\n        email: record.email,\n        subject: `Application for ${record.title}`,\n        message: `Dear ${record.name},\\n\\nI'm writing to express my interest in the position at ${record.company}.`,\n      };\n\n      try {\n        const response = await sendemail(payload);\n\n        if (response.status === 'success') {\n          console.log(`✅ Email sent to: ${record.email}`);\n          successCount++;\n        } else {\n          console.error(`❌ Failed to send email to: ${record.email} - ${response.message}`);\n          failedList.push({\n            email: record.email,\n            reason: response.message,\n          });\n        }\n      } catch (error) {\n        console.error(`❌ Error sending email to: ${record.email} - ${error.message}`);\n        failedList.push({\n          email: record.email,\n          reason: error.message,\n        });\n      }\n    }\n\n    setFailedEmails(failedList);\n\n    // ✅ Show success or failure summary\n    if (failedList.length > 0) {\n      alert(`✅ ${successCount} emails sent successfully!\\n❌ ${failedList.length} emails failed.`);\n    } else {\n      alert(`✅ All ${successCount} emails sent successfully!`);\n    }\n  };\n\n  return (\n    <div>\n      <h2>Email Sender</h2>\n      <button onClick={handleSendEmails}>Send Emails</button>\n\n      {failedEmails.length > 0 && (\n        <div>\n          <h3>❌ Failed Emails:</h3>\n          <ul>\n            {failedEmails.map((fail, index) => (\n              <li key={index}>\n                {fail.email} - {fail.reason}\n              </li>\n            ))}\n          </ul>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}